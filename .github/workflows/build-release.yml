name: MSBuild
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release
jobs:
  Build:
    strategy:
      matrix:
        architecture: [x64]
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1
      with:
        msbuild-architecture: ${{ matrix.architecture }}

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{ matrix.architecture }} ${{env.SOLUTION_FILE_PATH}}

    - name: Get short SHA
      run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

    - name: Set name
      run: echo "ART_NAME=tftpd64-${{ matrix.architecture }}-${{ env.SHORT_SHA }}" >> $env:GITHUB_ENV

    - name: Copy the readme and license files and create zip
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cp license.md ./bin/Release/license.txt
        cp readme.txt ./bin/Release/readme.txt
        mkdir ./bin/Upload/
        Compress-Archive -Path ./bin/Release/* -Destination ./bin/Upload/${{ env.ART_NAME }}.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: test-${{ github.ref_name }}-${{ github.run_number }}
        release_name: Release test-${{ github.ref_name }}-${{ github.run_number }}
        body: |
          Changes in this Release
          - https://github.com/${{ github.repository }}/commits/main
        draft: false
        prerelease: true

    - name: Upload Release
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./bin/Upload/${{ env.ART_NAME }}.zip
        asset_name: ${{ env.ART_NAME }}.zip
        asset_content_type: application/zip
